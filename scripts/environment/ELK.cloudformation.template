{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "ELK Stack - Elasticsearch, Logstash, Kibana",

    "Parameters": {

        "Stack": {
            "Description": "Stack applied as a tag",
            "Type": "String"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair for SSH access",
            "Type": "String"
        },
        "ElkCapacity": {
            "Description": "Autoscale Size",
            "Type": "Number",
            "Default": "1",
            "MinValue": 1,
            "MaxValue": 12
        },
        "ElkInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "m3.large",
            "AllowedValues": [
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type"
        },
        "VpcId": {
            "Description": "ID of the VPC onto which to launch the application eg. vpc-1234abcd",
            "Type": "String"
        },
        "PublicVpcSubnets" : {
            "Description": "Subnets to use in VPC for public ELB eg. subnet-abcd1234",
            "Type": "CommaDelimitedList"
        },
        "PrivateVpcSubnets" : {
            "Description": "Subnets to use in VPC for instances eg. subnet-abcd1234",
            "Type": "CommaDelimitedList"
        },
        "HostedZoneName": {
            "Description": "Route53 Hosted Zone in which kibana aliases will be created (without the trailing dot). Leave blank for no ALIAS.",
            "Type": "String",
            "AllowedPattern": "^(.*[^.]|)$"
        },
        "EBSVolumeSize": {
            "Description": "EBS storage to be attached to each instance (in GB). Set to zero for no attached EBS volume (the on-instance storage will be used instead).",
            "Type": "Number",
            "Default": 0,
            "MaxValue": 1000,
            "MinValue": 0
        },
        "ProxyUrlAndPort" : {
            "Description": "The fully qualified URL with port for the internet proxy that any component needs to use in order to access the greater internet.",
            "Type": "String"
        },
        "OfficeVpnCidr" : {
            "Description": "The CIDR (i.e. IP address range) that various components in the system will be accessible via.",
            "Type":"String",
            "Default":"127.0.0.0/32"
        },
        "DependenciesArchiveS3Url" : {
			"Description" : "The URL to the dependencies archive required by the various elements in the stack. This archive contains various elements from the source tree at the time the script was executed.",
			"Type" : "String"
		},
        "S3BucketName" : {
        	"Description" : "The name of the bucket containing the dependencies archive.",
			"Type" : "String"
        },
        "S3AccessKey" : {
			"Description" : "The Access Key for a user who is able to access the S3 location containing the dependencies archive.",
			"Type" : "String"
		},
        "S3SecretKey" : {
			"Description" : "The Secret Key for a user who is able to access the S3 location containing the dependencies archive.",
			"Type" : "String"
		}
    },

    "Conditions": {
        "HasDNS": { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "HostedZoneName" }, "" ] } ] },
        "UseEBS": { "Fn::Not": [ { "Fn::Equals" : [ { "Ref" : "EBSVolumeSize" }, "0" ] } ]}
    },

    "Mappings" : {
        "RegionMap" : {
            "ap-southeast-2" : { "ImageId": "ami-793f4e43" }
        },
        "InstanceMap": {
            "m3.medium": { "ESHeapSize": "2g" },
            "m3.large": { "ESHeapSize": "4g" },
            "m3.xlarge": { "ESHeapSize": "8g" },
            "m3.2xlarge": { "ESHeapSize": "15g" }
        }
    },

    "Resources": {

        "ElkPublicLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone": true,
                "Listeners": [
                    {
                        "Protocol": "HTTP",
                        "LoadBalancerPort": "80",
                        "InstancePort": "5601"
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:9200/",
                    "Timeout": "10",
                    "Interval": "20",
                    "UnhealthyThreshold": "10",
                    "HealthyThreshold": "2"
                },
                "Subnets": { "Ref": "PublicVpcSubnets" },
                "SecurityGroups": [
                    { "Ref": "ElkPublicLoadBalancerSecurityGroup" }
                ]
            }
        },
        "ElkInternalLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Scheme": "internal",
                "CrossZone": true,
                "Listeners": [
                    {
                        "Protocol": "TCP",
                        "LoadBalancerPort": "6379",
                        "InstancePort": "6379"
                    }
                ],
                "HealthCheck": {
                    "Target": "TCP:6379",
                    "Timeout": "10",
                    "Interval": "20",
                    "UnhealthyThreshold": "10",
                    "HealthyThreshold": "2"
                },
                "Subnets": { "Ref": "PrivateVpcSubnets" },
                "SecurityGroups": [
                    { "Ref": "ElkInternalLoadBalancerSecurityGroup" }
                ]
            }
        },
        "ElkAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "VPCZoneIdentifier": { "Ref": "PrivateVpcSubnets" },
                "LaunchConfigurationName": { "Ref": "ElkLaunchConfig" },
                "MinSize": "1",
                "MaxSize": "12",
                "DesiredCapacity": { "Ref": "ElkCapacity" },
                "HealthCheckType": "EC2",
                "HealthCheckGracePeriod": 300,
                "LoadBalancerNames": [ { "Ref": "ElkPublicLoadBalancer" }, { "Ref": "ElkInternalLoadBalancer" } ],
                "Tags": [
                    {
                        "Key": "Stack",
                        "Value": { "Ref": "Stack" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "App",
                        "Value": "ELK",
                        "PropagateAtLaunch": "true"
                    },
                    {
						"Key" : "Name",
						"Value" : { "Fn::Join" : [ "", [ "ELK ", "[", { "Ref" : "Stack" }, "]" ] ] },
						"PropagateAtLaunch" : "true"
                    }
                ]
            }
        },
        "ElkLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
				"AWS::CloudFormation::Init" : {
					"configSets" : {
						"default" : [
							"setup"
						]
					},
					"setup" : {
                        "sources" : {
							"/cfn/dependencies" : { "Ref" : "DependenciesArchiveS3Url" }
						}
					}
				},
                "AWS::CloudFormation::Authentication" : {
                    "S3AccessCreds" : {
                        "type" : "S3",
                        "accessKeyId" : { "Ref" : "S3AccessKey" },
                        "secretKey" : { "Ref": "S3SecretKey" },
                        "buckets" : [ { "Ref":"S3BucketName" } ]
                    }
                }
			},
            "Properties": {
                "ImageId": { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ImageId" ]},
                "SecurityGroups": [ { "Ref": "ElkSecurityGroup" } ],
                "InstanceType": { "Ref": "ElkInstanceType" },
                "BlockDeviceMappings": [ {
                    "Fn::If": [
                        "UseEBS",
                        {
                            "DeviceName" : "/dev/sdk",
                            "Ebs" : {
                                "VolumeSize" : { "Ref": "EBSVolumeSize"},
                                "VolumeType": "gp2"
                            }
                        },
                        { "Ref" : "AWS::NoValue" }
                    ]
                } ],
                "AssociatePublicIpAddress": "false",
                "KeyName": { "Ref": "KeyName" },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [ "\n", [
                            "#!/bin/bash -v",
                            { "Fn::Join": [ "", [ "echo \"export http_proxy=", { "Ref" : "ProxyUrlAndPort" }, "\" >> /etc/profile.d/proxy.sh" ]] },
                            { "Fn::Join": [ "", [ "echo \"export https_proxy=", { "Ref" : "ProxyUrlAndPort" }, "\" >> /etc/profile.d/proxy.sh" ]] },
                            "echo \"local_proxy_address=\\$(echo \\$http_proxy | sed -r 's_http://(.*):([0-9]+)_\\1_')\" >> /etc/profile.d/proxy.sh",
                            "echo \"local_proxy_port=\\$(echo \\$http_proxy | sed -r 's_http://(.*):([0-9]+)_\\2_')\" >> /etc/profile.d/proxy.sh",
                            "echo \"export proxy_address=\\$local_proxy_address\" >> /etc/profile.d/proxy.sh",
                            "echo \"export proxy_port=\\$local_proxy_port\" >> /etc/profile.d/proxy.sh",
                            "echo \"export no_proxy=localhost\" >> /etc/profile.d/proxy.sh",
                            "source /etc/profile.d/proxy.sh",

                            "apt-get -y install python-setuptools",
                            "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",

                            { "Fn::Join" : [ "", [ "cfn-init --region ", { "Ref" : "AWS::Region" }, " -s ", { "Ref" : "AWS::StackId" }, " -r ElkLaunchConfig || error_exit 'Failed to run cfn-init'"]] },

                            "wget -O - http://packages.elasticsearch.org/GPG-KEY-elasticsearch | apt-key add -",
                            "echo \"deb http://packages.elasticsearch.org/logstash/1.4/debian stable main\" > /etc/apt/sources.list.d/logstash.list",
                            "echo \"deb http://packages.elasticsearch.org/elasticsearch/1.4/debian stable main\" > /etc/apt/sources.list.d/elasticsearch.list",

                            "add-apt-repository -y ppa:chris-lea/node.js",
                            "apt-get -y update",
                            "apt-get -y install language-pack-en build-essential openjdk-7-jre-headless logstash elasticsearch nodejs",

                            "apt-get install dos2unix",

                            "cp -f /cfn/dependencies/scripts/environment/configuration/logstash-indexer.conf /etc/logstash/conf.d/logstash-indexer.conf",
                            "sed -i -e 's,@@ELASTICSEARCH,localhost,g' /etc/logstash/conf.d/logstash-indexer.conf",
                            "/usr/share/elasticsearch/bin/plugin -DproxyHost=$proxy_address -DproxyPort=$proxy_port --install elasticsearch/elasticsearch-cloud-aws/2.4.1",

                            "cp -f /cfn/dependencies/scripts/environment/configuration/elasticsearch.yml /etc/elasticsearch/elasticsearch.yml",
                            { "Fn::Join": [ "", [ "sed -i",
                                " -e 's,@@REGION,", { "Ref": "AWS::Region" }, ",g'",
                                " -e 's,@@STACK,", { "Ref": "Stack" }, ",g'",
                                " -e 's,@@APP,kibana,g'",
                                " /etc/elasticsearch/elasticsearch.yml" ] ] },
                            "echo \"http.cors.allow-origin: \"/.*/\"\" >> /etc/elasticsearch/elasticsearch.yml",
                            "echo \"http.cors.enabled: true\" >> /etc/elasticsearch/elasticsearch.yml",
                            "sed -i -e 's_http.host: 127.0.0.1__' /etc/elasticsearch/elasticsearch.yml",

                            "cp -f /cfn/dependencies/scripts/environment/configuration/upstart-elasticsearch.conf /etc/init/elasticsearch.conf",
                            "dos2unix /etc/init/elasticsearch.conf",

                            { "Fn::Join": [ "", [ "sed -i",
                                                  " -e s,@@ES_HEAP_SIZE,", { "Fn::FindInMap" : [ "InstanceMap", { "Ref" : "ElkInstanceType" }, "ESHeapSize" ]}, ",g",
                                                  " /etc/init/elasticsearch.conf" ] ] },

                            { "Fn::If": [
                                "UseEBS",
                                { "Fn::Join": [ "\n", [
                                    "mkfs.ext4 /dev/xvdk",
                                    "mkdir /data",
                                    "mount /dev/xvdk /data",
                                    "echo '/dev/xvdk /data ext4 defaults 0 2' > /etc/fstab"
                                ]]},
                                { "Fn::Join": [ "\n", [
                                    "mkdir /data",
                                    "mount /dev/xvdb /data"
                                ]]}
                            ]},

                            "chown elasticsearch /data",
                            "echo \"127.0.0.1 $(hostname)\" >> /etc/hosts",

                            "sysctl vm.overcommit_memory=1",

                            "wget https://download.elasticsearch.org/kibana/kibana/kibana-4.0.1-linux-x64.tar.gz",
                            "tar zxvf kibana-4.0.1-linux-x64.tar.gz",
                            "mkdir /opt/kibana",
                            "mv kibana-4.0.1-linux-x64 kibana",
                            "mv kibana /opt",
                            "cp /cfn/dependencies/scripts/environment/configuration/kibana4_init /etc/init.d/kibana",
                            "chmod +x /etc/init.d/kibana",
                            "dos2unix /etc/init.d/kibana",
                            "start logstash",
                            "start elasticsearch",
                            "/etc/init.d/kibana start",

                            { "Fn::Join": [ "", [ "cfn-signal -e $? ", { "Fn::Base64" : { "Ref" : "ElkWaitHandle" }} ]] }
                        ] ]
                    }
                }
            }
        },
        "ElkPublicLoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": { "Ref": "VpcId" },
                "GroupDescription": "Allow access to kibana on public ELB from internet",
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5601",
                        "ToPort": "5601",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9200",
                        "ToPort": "9200",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ElkInternalLoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": { "Ref": "VpcId" },
                "GroupDescription": "Allow logstash messages to internal ELB",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "6379",
                        "ToPort": "6379",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "6379",
                        "ToPort": "6379",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ElkSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow kibana from public and logstash from internal ELBs",
                "VpcId": { "Ref": "VpcId" },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "6379",
                        "ToPort": "6379",
                        "SourceSecurityGroupId": { "Ref": "ElkInternalLoadBalancerSecurityGroup" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5601",
                        "ToPort": "5601",
                        "SourceSecurityGroupId": { "Ref": "ElkPublicLoadBalancerSecurityGroup" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9200",
                        "ToPort": "9200",
                        "SourceSecurityGroupId": { "Ref": "ElkPublicLoadBalancerSecurityGroup" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": { "Ref" : "OfficeVpnCidr" }
                    },
                    {
						"IpProtocol" : "tcp",
						"FromPort" : "5601",
						"ToPort" : "5601",
						"CidrIp" : { "Ref" : "OfficeVpnCidr" }
					},
                    {
						"IpProtocol" : "tcp",
						"FromPort" : "9200",
						"ToPort" : "9200",
						"CidrIp" : { "Ref" : "OfficeVpnCidr" }
					},
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "6379",
                        "ToPort": "6379",
                        "CidrIp": { "Ref": "OfficeVpnCidr" }
                    }
                ]
            }
        },
        "ElkSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "ElkSecurityGroup", "GroupId" ] },
                "IpProtocol": "tcp",
                "FromPort": "9300",
                "ToPort": "9305",
                "SourceSecurityGroupId": { "Fn::GetAtt": [ "ElkSecurityGroup", "GroupId" ] }
            }
        },
        "KibanaHostRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneName" : { "Fn::Join" : [ "", [{"Ref" : "HostedZoneName"}, "." ]]},
                "Comment" : "DNS name for my instance.",
                "Name" : { "Fn::Join" : [ "", [{"Ref" : "Stack"}, "-logging-kibana.", {"Ref" : "HostedZoneName"} ]]},
                "Type" : "A",
                "AliasTarget" : {
                  "HostedZoneId" : { "Fn::GetAtt" : ["ElkPublicLoadBalancer", "CanonicalHostedZoneNameID"] },
                  "DNSName" : { "Fn::GetAtt" : ["ElkPublicLoadBalancer","DNSName"] }
                }
            }
        },
        "LogstashHostRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneName" : { "Fn::Join" : [ "", [{"Ref" : "HostedZoneName"}, "." ]]},
                "Comment" : "DNS name for my instance.",
                "Name" : { "Fn::Join" : [ "", [ "internal-", {"Ref" : "Stack"}, "-logging-logstash.", {"Ref" : "HostedZoneName"} ]]},
                "Type" : "A",
                "AliasTarget" : {
                  "HostedZoneId" : { "Fn::GetAtt" : ["ElkInternalLoadBalancer", "CanonicalHostedZoneNameID"] },
                  "DNSName" : { "Fn::GetAtt" : ["ElkInternalLoadBalancer","DNSName"] }
                }
            }
        },
        "ElkWaitHandle" : {
			"Type" : "AWS::CloudFormation::WaitConditionHandle"
		},
		"ElkWaitCondition" : {
			"Type" : "AWS::CloudFormation::WaitCondition",
			"DependsOn" : "ElkLaunchConfig",
			"Properties" : {
				"Handle" : {
					"Ref" : "ElkWaitHandle"
				},
				"Timeout" : "3000"
			}
		}
    },

    "Outputs": {
        "LogstashEndpoint": {
            "Value": { "Fn::Join": ["", [ { "Ref" : "LogstashHostRecord" }, ":6379"]] },
            "Description": "Logging endpoint for Logstash TCP input"
        },
        "KibanaURL": {
            "Value" : { "Fn::Join" : ["", ["http://", { "Ref" : "KibanaHostRecord" } ] ] },
            "Description": "URL for the Kibana Dashboard"
        }
    }
}

